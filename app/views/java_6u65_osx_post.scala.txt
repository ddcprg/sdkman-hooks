@import domain._
@(candidate: Candidate, version: String, platform: Platform)#!/bin/bash
function __sdkman_post_installation_hook {
    __sdkman_echo_debug "A @{platform.name} post-install hook was found for @{candidate.name} @version."

    __sdkman_validate_input_binary "$binary_input" || return 1

    __sdkman_authorise_user || return 1

    local work_dir="${SDKMAN_DIR}/tmp/out"
    local candidate_work_dir="${work_dir}/@{candidate.identifier}-@version"
    local mount_volume="/Volumes/Java for OS X 2015-001"
    local jdk_home_folder="/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home"

    echo ""
    echo "Repackaging @{candidate.name} @version..."

    rm -rf "$work_dir"
    mkdir -p "$work_dir"

    echo "Attaching to the DMG..."
    disks=$(hdiutil attach -noverify -nomount "$binary_input")
    disk=$(echo "$disks" | awk '{print $1;}' | head -n 1)

    echo "Mounting DMG as Volume..."
    diskutil mountDisk "$disk"

    echo "Installing PKG inside DMG..."
    sudo -E installer -package "${mount_volume}/JavaForOSX.pkg" -target LocalSystem

    echo "Copy JDK Home to temp folder..."
    cp -RP "$jdk_home_folder" "$candidate_work_dir"
    unlink "${candidate_work_dir}/bundle"
    ln -s "${jdk_home_folder}/.." "${candidate_work_dir}/bundle"

    local present_dir="$(pwd)"
    cd "$work_dir"
    echo "Preparing archive..."
    /usr/bin/env zip -qr --symlinks "$zip_output" .
    cd "$present_dir"

    echo "Unmounting volume..."
    hdiutil unmount "$mount_volume"

    echo "Done repackaging..."
}

function __sdkman_validate_input_binary {
    local sha_256="8f40dbf821e21410feab4d9e2e533c42518897b7cac5edfad895e91016f918fc"
    checksum=$(shasum -a 256 "$1" | awk '{print $1}')
    if [[ $sha_256 != $checksum ]]; then
        echo "SHA-256 does not match! Please try re-installing."
        echo "Expected: $sha_256"
        echo "Actual  : $checksum"
        exit 1
    else
        echo "Binary validation passed..."
    fi
}

function __sdkman_authorise_user {
    echo "We will be needing super powers..."
    authorised=$(sudo echo 'true')
    if [[ "$authorised" != 'true' ]]; then
        echo "Authorisation failed. Please try installing again..."
        return 1
    fi
}